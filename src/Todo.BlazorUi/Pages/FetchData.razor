@page "/todo"
@inject HttpClient Http
@inject TodoApiRequestHandler ApiRequestHandler

@if (!isLoggedIn)
{
    <MatDialog @bind-IsOpen="@loginDialogIsOpen" >
        <MatDialogTitle>Login & Set the Todo API Url</MatDialogTitle>
        <MatDialogContent>
            <MatTextField @bind-Value="@Username" Label="Username"></MatTextField>
            <MatTextField @bind-Value="@Password" Label="Password"></MatTextField>
            <MatTextField @bind-Value="@ApiUrl" Label="API Url"></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@LoginAsync">Login</MatButton>
        </MatDialogActions>
    </MatDialog>
}
else
{
    <h1>Current Todo List From "@ApiUrl"</h1>

    <div class="text-field-container">
        <MatTooltip Tooltip="Double Press Enter To Add Item" >
            <MatTextField @bind-Value="@TodoDescription" Label="Quick Add Todo" Icon="add" IconTrailing="true" Outlined="true" FullWidth="true" OnKeyPress="@Add" RefBack="@context"></MatTextField>
        </MatTooltip>
    </div>

    <MatAccordion Multi="true">
        @foreach (var item in todoItems)
        {
            <MatExpansionPanel>
                <MatExpansionPanelSummary>
                    <MatExpansionPanelHeader>
                        <div>
                            <MatCheckbox @bind-Checked="@item.IsCompleted"></MatCheckbox>
                        </div>
                    </MatExpansionPanelHeader>
                        <MatExpansionPanelSubHeader>
                            @item.Name
                        </MatExpansionPanelSubHeader>
                </MatExpansionPanelSummary>
                <MatExpansionPanelDetails>
                    <p>
                        @(
                            item.Description == string.Empty
                            ? "No Description Provided."
                            : item.Description
                        )
                    </p>
                    <p>@($"Due Date: {item.DueDate?.ToString("dddd, dd MMMM yyyy") ?? "None Set."}")</p>
                </MatExpansionPanelDetails>
            </MatExpansionPanel>

        }
    </MatAccordion>
    <MatButton OnClick="@OpenAddTodoDialog">Add Todo Item</MatButton> <MatButton Icon="remove" OnClick="@Delete" Label="Remove Completed"></MatButton>


    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>Add a new Todo Item</MatDialogTitle>
        <MatDialogContent>
            <MatTextField @bind-Value="@TodoName" Label="Name"></MatTextField>
            <MatTextField @bind-Value="@TodoDescription" Label="Description"></MatTextField>
            <p>
                <MatDatePicker @bind-Value="@TodoDate" Label="Pick a DueDate"></MatDatePicker>
            </p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { dialogIsOpen = false; })">Close</MatButton>
            <MatButton OnClick="@OnAddTodoDialogAddClick">Add</MatButton>
        </MatDialogActions>
    </MatDialog>

}

@code {

    bool dialogIsOpen;
    bool loginDialogIsOpen = true;
    public string Username { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;

    bool isLoggedIn;
    TodoItem[] todoItems;

    public string ApiUrl { get; set; } = string.Empty;
    public string TaskId { get; set; } = string.Empty;
    public string TodoDescription { get; set; } = string.Empty;
    public string TodoName { get; set; }
    public DateTime? TodoDate { get; set; }

    async Task LoginAsync()
    {
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", Convert.ToBase64String(
           System.Text.ASCIIEncoding.ASCII.GetBytes(
              $"{Username}:{Password}")));

        if (await ApiRequestHandler.HandshakeSuccess(ApiUrl))
        {
            isLoggedIn = true;
            loginDialogIsOpen = false;
        }

        LoginDetails.AlreadyHasAuth = true;
        LoginDetails.Username = Username;
        LoginDetails.Password = Password;
        LoginDetails.ApiUrl = ApiUrl;

        todoItems = await ApiRequestHandler.GetOrRefreshTodoItemsAsync(ApiUrl);

    }

    protected override void OnInitialized()
    {
        if (LoginDetails.AlreadyHasAuth)
        {
            ApiUrl = LoginDetails.ApiUrl;
            Username = LoginDetails.Username;
            Password = LoginDetails.Password;
        }
        else
        {
            isLoggedIn = false;
        }
    }

    void OpenAddTodoDialog()
    {
        dialogIsOpen = true;
    }

    async Task OnAddTodoDialogAddClick()
    {
        var todo = new TodoItem
        {
            Name = TodoName,
            Description = TodoDescription,
            DueDate = TodoDate
        };

        var json = JsonConvert.SerializeObject(todo);
        var request = new HttpRequestMessage(HttpMethod.Post, $"{ApiUrl}/api/todo/add");
        request.Content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await Http.SendAsync(request);
        response.EnsureSuccessStatusCode();

        TodoDescription = string.Empty;
        TodoName = string.Empty;
        TodoDate = null;

        await GetOrRefreshTodoItems();

        dialogIsOpen = false;
    }

    public async Task Add(KeyboardEventArgs e)
    {
        if (e.Key != "Enter") { return; }

        if (TodoDescription == string.Empty) { return; }

        var todo = new TodoItem
        {
            Description = TodoDescription
        };

        var json = JsonConvert.SerializeObject(todo);
        var request = new HttpRequestMessage(HttpMethod.Post, $"{ApiUrl}/api/todo/add");
        request.Content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await Http.SendAsync(request);
        response.EnsureSuccessStatusCode();

        TodoDescription = string.Empty;

        await GetOrRefreshTodoItems();
    }

    public async Task Delete(MouseEventArgs e)
    {
        if (!todoItems.Any(i => i.IsCompleted == true)) { return; }

        var pendingDeleteItems = todoItems.Where(i => i.IsCompleted == true);
        var itemsToDelete = pendingDeleteItems.Select(i => i.Id);

        var json = JsonConvert.SerializeObject(itemsToDelete);
        var request = new HttpRequestMessage(HttpMethod.Delete, $"{ApiUrl}/api/todo/removemany");
        request.Content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await Http.SendAsync(request);
        response.EnsureSuccessStatusCode();

        TaskId = string.Empty;

        await GetOrRefreshTodoItems();
    }

    private async Task GetOrRefreshTodoItems()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"{ApiUrl}/api/todo/list");

        var httpResponse = await Http.SendAsync(request);
        httpResponse.EnsureSuccessStatusCode();

        var json = await httpResponse.Content.ReadAsStringAsync();

        todoItems = JsonConvert.DeserializeObject<TodoItem[]>(json);
    }
}
