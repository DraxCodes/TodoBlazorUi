@page "/todo"
@inject HttpClient Http
@inject TodoApiRequestHandler ApiRequestHandler

@if (!isLoggedIn)
{
    <MatDialog @bind-IsOpen="@loginDialogIsOpen" >
        <MatDialogTitle>Login & Set the Todo API Url</MatDialogTitle>
        <MatDialogContent>
            <MatTextField @bind-Value="@Username" Label="Username"></MatTextField>
            <MatTextField @bind-Value="@Password" Label="Password"></MatTextField>
            <MatTextField @bind-Value="@ApiUrl" Label="API Url"></MatTextField>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@LoginAsync">Login</MatButton>
        </MatDialogActions>
    </MatDialog>
}
else
{
    <h1>Current Todo List From "@ApiUrl"</h1>

    <div class="text-field-container">
        <MatTooltip Tooltip="Double Press Enter To Add Item">
            <MatTextField @bind-Value="@TodoDescription" Label="Quick Add Todo" Icon="add" IconTrailing="true" Outlined="true" FullWidth="true" OnKeyPress="@AddTodo" RefBack="@context"></MatTextField>
        </MatTooltip>
    </div>

    <MatAccordion Multi="true">
        @foreach (var item in todoItems)
        {
            <MatExpansionPanel>
                <MatExpansionPanelSummary>
                    <MatExpansionPanelHeader>
                        <div>
                            <MatCheckbox @bind-Checked="@item.IsCompleted"></MatCheckbox>
                        </div>
                    </MatExpansionPanelHeader>
                    <MatExpansionPanelSubHeader>
                        @item.Name
                    </MatExpansionPanelSubHeader>
                </MatExpansionPanelSummary>
                <MatExpansionPanelDetails>
                    <p>
                        @(
                            item.Description == string.Empty
                            ? "No Description Provided."
                            : item.Description
                        )
                    </p>
                    <p>@($"Due Date: {item.DueDate?.ToString("dddd, dd MMMM yyyy") ?? "None Set."}")</p>
                </MatExpansionPanelDetails>
            </MatExpansionPanel>

        }
    </MatAccordion>
    <MatButton OnClick="@OpenAddTodoDialog">Add Todo Item</MatButton> <MatButton Icon="remove" OnClick="@Delete" Label="Remove Completed"></MatButton>


    <MatDialog @bind-IsOpen="@todoDialogIsOpen">
        <MatDialogTitle>Add a new Todo Item</MatDialogTitle>
        <MatDialogContent>
            <MatTextField @bind-Value="@TodoName" Label="Name"></MatTextField>
            <MatTextField @bind-Value="@TodoDescription" Label="Description"></MatTextField>
            <p>
                <MatDatePicker @bind-Value="@TodoDate" Label="Pick a DueDate"></MatDatePicker>
            </p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { todoDialogIsOpen = false; })">Close</MatButton>
            <MatButton OnClick="@OnAddTodoDialogAddClick">Add</MatButton>
        </MatDialogActions>
    </MatDialog>

}

@code {

    bool todoDialogIsOpen;

    bool loginDialogIsOpen = true;
    public string Username { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;

    bool isLoggedIn;
    TodoItem[] todoItems;

    public string ApiUrl { get; set; } = string.Empty;
    public string TaskId { get; set; } = string.Empty;
    public string TodoDescription { get; set; } = string.Empty;
    public string TodoName { get; set; }
    public DateTime? TodoDate { get; set; }

    async Task LoginAsync()
    {
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", Convert.ToBase64String(
           System.Text.ASCIIEncoding.ASCII.GetBytes(
              $"{Username}:{Password}")));

        if (await ApiRequestHandler.HandshakeSuccess(ApiUrl))
        {
            isLoggedIn = true;
            loginDialogIsOpen = false;
        }

        LoginDetails.AlreadyHasAuth = true;
        LoginDetails.Username = Username;
        LoginDetails.Password = Password;
        LoginDetails.ApiUrl = ApiUrl;

        todoItems = await ApiRequestHandler.GetOrRefreshTodoItemsAsync(ApiUrl);

    }

    protected override void OnInitialized()
    {
        if (LoginDetails.AlreadyHasAuth)
        {
            ApiUrl = LoginDetails.ApiUrl;
            Username = LoginDetails.Username;
            Password = LoginDetails.Password;
        }
        else
        {
            isLoggedIn = false;
        }
    }

    void OpenAddTodoDialog()
    {
        todoDialogIsOpen = true;
    }

    async Task OnAddTodoDialogAddClick()
    {
        var todo = new TodoItem(TodoDescription, TodoName, TodoDate);

        await ApiRequestHandler.AddTodoAsync(todo, ApiUrl);

        ResetFields();

        todoItems = await ApiRequestHandler.GetOrRefreshTodoItemsAsync(ApiUrl);

        todoDialogIsOpen = false;
    }

    public async Task AddTodo(KeyboardEventArgs e)
    {
        if (e.Key != "Enter") { return; }
        if (TodoDescription == string.Empty) { return; }

        var todo = new TodoItem(TodoDescription);

        await ApiRequestHandler.AddTodoAsync(todo, ApiUrl);

        ResetFields();

        todoItems = await ApiRequestHandler.GetOrRefreshTodoItemsAsync(ApiUrl);
    }

    public async Task Delete(MouseEventArgs e)
    {
        if (!todoItems.Any(i => i.IsCompleted == true)) { return; }

        await ApiRequestHandler.DeleteTodosAsync(todoItems, ApiUrl);
        todoItems = await ApiRequestHandler.GetOrRefreshTodoItemsAsync(ApiUrl);
    }

    private void ResetFields()
    {
        TodoDescription = string.Empty;
        TodoName = string.Empty;
        TodoDate = null;
    }
}
